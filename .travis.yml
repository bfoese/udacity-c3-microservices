# Travis multi-stage:
# - Jobs within a stage are being performed in parallel
# - Stages are performed sequentially
# - each job starts with a clean context, just like in GitHub Actions
# Travis language:
# - language describes the base image
# - default is Ruby
# - list of tools included for basic image types: https://docs.travis-ci.com/user/languages/minimal-and-generic/
branches:
  only:
  - main

jobs:
  include:
    - stage: "Build"
      name: "Image api-gateway"
      language: node_js
      node_js:
        - 14
      services:
        - docker
      before_script:
        - cd udagram-api
      script:
        - docker build --build-arg NODE_ENV=production -t udagram-api-gateway .
        - docker tag udagram-api-gateway bfoese/udagram-api-gateway:latest
      after_success:
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - docker push bfoese/udagram-api-gateway

    - language: node_js
      name: "Image api-feed"
      node_js:
        - 14
      services:
        - docker
      before_script:
        - cd udagram-api-feed
      script:
        - docker build --build-arg NODE_ENV=production -t udagram-api-feed .
        - docker tag udagram-api-feed bfoese/udagram-api-feed:latest
      after_success:
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - docker push bfoese/udagram-api-feed

    - language: node_js
      name: "Image api-user"
      node_js:
        - 14
      services:
        - docker
      before_script:
        - cd udagram-api-user
      script:
        - docker build --build-arg NODE_ENV=production -t udagram-api-user .
        - docker tag udagram-api-user bfoese/udagram-api-user:latest
      after_success:
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - docker push bfoese/udagram-api-user

    - language: node_js
      name: "Image frontend"
      node_js:
        - 14
      services:
        - docker
      before_script:
        - cd udagram-frontend
      script:
        - docker build -t udagram-frontend .
        - docker tag udagram-frontend bfoese/udagram-frontend:latest
      after_success:
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - docker push bfoese/udagram-frontend

    - stage: "Deploy"
      name: "Deploy to AWS EKS"
      language: minimal
      before_install:
        # Install kubectl
        - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
        - chmod +x ./kubectl
        - sudo mv ./kubectl /usr/local/bin/kubectl
        # Install AWS CLI
        - if ! [ -x "$(command -v aws)" ]; then curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" ; unzip awscliv2.zip ; sudo ./aws/install ; fi
        # Set environment variables for AWS CLI
        - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
        - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
        - export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
        # Setup kubectl config to use the desired AWS EKS cluster
        - aws eks update-kubeconfig --region ${AWS_DEFAULT_REGION} --name ${AWS_EKS_CLUSTER_NAME}

      deploy:
        - provider: script
          script: bash k8s-config/deployment.sh
          on:
            branch: main
